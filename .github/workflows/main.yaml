# Built from:
# https://docs.github.com/en/actions/guides/building-and-testing-python
# https://github.com/snok/install-poetry#workflows-and-tips

name: Build and test schemasheets

on: [ push, pull_request ]

jobs:
  test:

    runs-on: ubuntu-latest

    steps:

      #----------------------------------------------
      #       check-out repo and set-up python     
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      
      #----------------------------------------------
      #          install & configure poetry         
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #       load cached venv if cache exists      
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist 
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #    install your root project, if required 
      #----------------------------------------------      
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite   
      #----------------------------------------------
      - name: Run tests
        run: poetry run pytest --cov-report=term --cov-report=html:htmlcov --cov=schemasheets/

      #----------------------------------------------
      #           upload coverage results
      #----------------------------------------------
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      #----------------------------------------------
      #           test generate-populate via `make scripts-all`
      #----------------------------------------------
      - name: generate-populate via make scripts-all
        run: make scripts-all